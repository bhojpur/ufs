// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UfsUIClient is the client API for UfsUI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UfsUIClient interface {
	// ListEngineSpecs returns a list of Storage Engine(s) that can be started through the UI.
	ListEngineSpecs(ctx context.Context, in *ListEngineSpecsRequest, opts ...grpc.CallOption) (UfsUI_ListEngineSpecsClient, error)
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error)
}

type ufsUIClient struct {
	cc grpc.ClientConnInterface
}

func NewUfsUIClient(cc grpc.ClientConnInterface) UfsUIClient {
	return &ufsUIClient{cc}
}

func (c *ufsUIClient) ListEngineSpecs(ctx context.Context, in *ListEngineSpecsRequest, opts ...grpc.CallOption) (UfsUI_ListEngineSpecsClient, error) {
	stream, err := c.cc.NewStream(ctx, &UfsUI_ServiceDesc.Streams[0], "/v1.UfsUI/ListEngineSpecs", opts...)
	if err != nil {
		return nil, err
	}
	x := &ufsUIListEngineSpecsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type UfsUI_ListEngineSpecsClient interface {
	Recv() (*ListEngineSpecsResponse, error)
	grpc.ClientStream
}

type ufsUIListEngineSpecsClient struct {
	grpc.ClientStream
}

func (x *ufsUIListEngineSpecsClient) Recv() (*ListEngineSpecsResponse, error) {
	m := new(ListEngineSpecsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ufsUIClient) IsReadOnly(ctx context.Context, in *IsReadOnlyRequest, opts ...grpc.CallOption) (*IsReadOnlyResponse, error) {
	out := new(IsReadOnlyResponse)
	err := c.cc.Invoke(ctx, "/v1.UfsUI/IsReadOnly", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UfsUIServer is the server API for UfsUI service.
// All implementations must embed UnimplementedUfsUIServer
// for forward compatibility
type UfsUIServer interface {
	// ListEngineSpecs returns a list of Storage Engine(s) that can be started through the UI.
	ListEngineSpecs(*ListEngineSpecsRequest, UfsUI_ListEngineSpecsServer) error
	// IsReadOnly returns true if the UI is readonly.
	IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error)
	mustEmbedUnimplementedUfsUIServer()
}

// UnimplementedUfsUIServer must be embedded to have forward compatible implementations.
type UnimplementedUfsUIServer struct {
}

func (UnimplementedUfsUIServer) ListEngineSpecs(*ListEngineSpecsRequest, UfsUI_ListEngineSpecsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListEngineSpecs not implemented")
}
func (UnimplementedUfsUIServer) IsReadOnly(context.Context, *IsReadOnlyRequest) (*IsReadOnlyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsReadOnly not implemented")
}
func (UnimplementedUfsUIServer) mustEmbedUnimplementedUfsUIServer() {}

// UnsafeUfsUIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UfsUIServer will
// result in compilation errors.
type UnsafeUfsUIServer interface {
	mustEmbedUnimplementedUfsUIServer()
}

func RegisterUfsUIServer(s grpc.ServiceRegistrar, srv UfsUIServer) {
	s.RegisterService(&UfsUI_ServiceDesc, srv)
}

func _UfsUI_ListEngineSpecs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListEngineSpecsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(UfsUIServer).ListEngineSpecs(m, &ufsUIListEngineSpecsServer{stream})
}

type UfsUI_ListEngineSpecsServer interface {
	Send(*ListEngineSpecsResponse) error
	grpc.ServerStream
}

type ufsUIListEngineSpecsServer struct {
	grpc.ServerStream
}

func (x *ufsUIListEngineSpecsServer) Send(m *ListEngineSpecsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _UfsUI_IsReadOnly_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsReadOnlyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UfsUIServer).IsReadOnly(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v1.UfsUI/IsReadOnly",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UfsUIServer).IsReadOnly(ctx, req.(*IsReadOnlyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UfsUI_ServiceDesc is the grpc.ServiceDesc for UfsUI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UfsUI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "v1.UfsUI",
	HandlerType: (*UfsUIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsReadOnly",
			Handler:    _UfsUI_IsReadOnly_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListEngineSpecs",
			Handler:       _UfsUI_ListEngineSpecs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ufs-ui.proto",
}
